/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.IO;
using System.Reflection;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using PaperlessRestAPI.BusinessLogic;
using PaperlessRestAPI.BusinessLogic.Interfaces;
using PaperlessRestAPI.BusinessLogic.Interfaces.Components;
using PaperlessRestAPI.DataAccess.Sql;
using PaperlessRestAPI.Filters;
using PaperlessRestAPI.Formatters;
using PaperlessRestAPI.OpenApi;

namespace PaperlessRestAPI
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="configuration"></param>
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
        /// The application configuration.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {

            // Add framework services.

            services
                // Don't need the full MVC stack for an API, see https://andrewlock.net/comparing-startup-between-the-asp-net-core-3-templates/
                .AddControllers(options =>
                {
                    options.InputFormatters.Insert(0, new InputFormatterStream());
                })
                .AddNewtonsoftJson(opts =>
                {
                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                    opts.SerializerSettings.Converters.Add(new StringEnumConverter
                    {
                        NamingStrategy = new CamelCaseNamingStrategy()
                    });
                });
            services.AddCors(options =>
            {
                options.AddDefaultPolicy(
                    policy =>
                    {
                       /*policy.WithOrigins("http://localhost:4200/")
                                .AllowAnyHeader()
                                .AllowAnyMethod();*/
                        policy.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader();
                    });
            });
            services
                .AddSwaggerGen(c =>
                {
                    c.EnableAnnotations(enableAnnotationsForInheritance: true, enableAnnotationsForPolymorphism: true);

                    c.SwaggerDoc("1.0", new OpenApiInfo
                    {
                        Title = "Paperless Rest Server",
                        Description = "Paperless Rest Server (ASP.NET Core 6.0)",
                        TermsOfService = new Uri("https://github.com/openapitools/openapi-generator"),
                        Contact = new OpenApiContact
                        {
                            Name = "OpenAPI-Generator Contributors",
                            Url = new Uri("https://github.com/openapitools/openapi-generator"),
                            Email = ""
                        },
                        License = new OpenApiLicense
                        {
                            Name = "NoLicense",
                            Url = new Uri("http://localhost")
                        },
                        Version = "1.0",
                    });
                    c.CustomSchemaIds(type => type.FriendlyId(true));
                    c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{Assembly.GetEntryAssembly().GetName().Name}.xml");

                    // Include DataAnnotation attributes on Controller Action parameters as OpenAPI validation rules (e.g required, pattern, ..)
                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                    c.OperationFilter<GeneratePathParamsValidationFilter>();
                });
            services
                .AddSwaggerGenNewtonsoftSupport();

            RegisterDAL(services);
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseDefaultFiles();
            app.UseStaticFiles();
            app.UseSwagger(c =>
                {
                    c.RouteTemplate = "openapi/{documentName}/openapi.json";
                })
                .UseSwaggerUI(c =>
                {
                    // set route prefix to openapi, e.g. http://localhost:8080/openapi/index.html
                    c.RoutePrefix = "openapi";
                    //TODO: Either use the SwaggerGen generated OpenAPI contract (generated from C# classes)
                    c.SwaggerEndpoint("/openapi/1.0/openapi.json", "Paperless Rest Server");

                    //TODO: Or alternatively use the original OpenAPI contract that's included in the static files
                    // c.SwaggerEndpoint("/openapi-original.json", "Paperless Rest Server Original");
                });
            app.UseRouting();
            app.UseCors();
            app.UseEndpoints(endpoints =>
                {
                    endpoints.MapControllers();
                });
        }

        private void RegisterBL(IServiceCollection services)
        {
            services.AddSingleton<IDocumentCRUDLogic, DocumentCRUDLogic>();
            services.AddSingleton<IElasticSearchAccessLogic, ElasticSearchAccessLogic>();
            services.AddSingleton<ISearchDocumentLogic, SearchDocumentLogic>();
            services.AddSingleton<ITextRecognitionLogic, TextRecognitionLogic>();
            services.AddSingleton<ITextRecognitionLogic, TextRecognitionLogic>();
            // services.AddTransient<ITextRecognitionLogic, TextRecognitionLogic>();
        }

        private void RegisterDAL(IServiceCollection services)
        {
            services.AddSingleton<IDbConnectionStringContainer>(new DbConnectionStringContainer(Configuration["DB_ConnectionString"]));

            //services.AddSingleton<AutoMigrateService>();
            services.AddSingleton<PaperlessDbContextFactory>();

            /*
            var rabbitmq = new RabbitmqQueueOCRJob(new OptionsWrapper<RabbitmqQueueOptions>(new RabbitmqQueueOptions(
                ConnectionString: Configuration["RABBITMQ_ConnectionString"],
                QueueName: Configuration["RABBITMQ_QueueName"])));
            services.AddSingleton<RabbitmqQueueOCRJob>(rabbitmq);
            */
            //UploadDocumentLogic udl = new UploadDocumentLogic(services.BuildServiceProvider());
            //Document d = new Document();
            //d.Title = "test124";
            //udl.UploadDocument(d);

        }
    }
}
